{"ast":null,"code":"var _jsxFileName = \"/Users/avinashpathrol/Downloads/Silvacom/Travel Reservation/client/src/components/WeatherDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WeatherDetails({\n  city\n}) {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      try {\n        let lat = city.lat,\n          lon = city.lon;\n\n        // If lat and lon are not provided, fetch them using the city name\n        if (!lat || !lon) {\n          const geoResponse = await fetch(`http://localhost:3001/geo/direct?q=${encodeURIComponent(city.label)}`);\n          const geoData = await geoResponse.json();\n          if (geoData && geoData.length > 0) {\n            lat = geoData[0].lat;\n            lon = geoData[0].lon;\n          } else {\n            throw new Error('Failed to obtain city coordinates');\n          }\n        }\n\n        // Now fetch the weather using lat and lon\n        const weatherResponse = await fetch(`http://localhost:3001/weather?lat=${lat}&lon=${lon}`);\n        const weatherData = await weatherResponse.json();\n        if (!weatherResponse.ok) throw new Error(weatherData.message);\n        setWeather(weatherData);\n      } catch (error) {\n        console.error(error);\n        setError('Failed to load weather data');\n      }\n    };\n    if (city) {\n      fetchWeatherData();\n    }\n  }, [city]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 12\n    }, this);\n  }\n  if (!weather || !weather.current || !weather.current.condition) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading weather...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Weather in \", city.label]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: weather.current.condition.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `https://${weather.current.condition.icon}`,\n      alt: \"Weather icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Temperature: \", weather.current.temp_c, \"\\xB0C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(WeatherDetails, \"dducRVO0pCJQnxjTimDps8bxXd8=\");\n_c = WeatherDetails;\nexport default WeatherDetails;\nvar _c;\n$RefreshReg$(_c, \"WeatherDetails\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WeatherDetails","city","_s","weather","setWeather","error","setError","fetchWeatherData","lat","lon","geoResponse","fetch","encodeURIComponent","label","geoData","json","length","Error","weatherResponse","weatherData","ok","message","console","children","fileName","_jsxFileName","lineNumber","columnNumber","current","condition","text","src","icon","alt","temp_c","_c","$RefreshReg$"],"sources":["/Users/avinashpathrol/Downloads/Silvacom/Travel Reservation/client/src/components/WeatherDetails.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction WeatherDetails({ city }) {\n  const [weather, setWeather] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      try {\n        let lat = city.lat, lon = city.lon;\n        \n        // If lat and lon are not provided, fetch them using the city name\n        if (!lat || !lon) {\n          const geoResponse = await fetch(`http://localhost:3001/geo/direct?q=${encodeURIComponent(city.label)}`);\n          const geoData = await geoResponse.json();\n          if (geoData && geoData.length > 0) {\n            lat = geoData[0].lat;\n            lon = geoData[0].lon;\n          } else {\n            throw new Error('Failed to obtain city coordinates');\n          }\n        }\n        \n        // Now fetch the weather using lat and lon\n        const weatherResponse = await fetch(`http://localhost:3001/weather?lat=${lat}&lon=${lon}`);\n        const weatherData = await weatherResponse.json();\n        if (!weatherResponse.ok) throw new Error(weatherData.message);\n        setWeather(weatherData);\n      } catch (error) {\n        console.error(error);\n        setError('Failed to load weather data');\n      }\n    };\n\n    if (city) {\n      fetchWeatherData();\n    }\n  }, [city]);\n  \n  if (error) {\n    return <p>{error}</p>;\n  }\n\n  if (!weather || !weather.current || !weather.current.condition) {\n    return <p>Loading weather...</p>;\n  }\n\n  return (\n    <div>\n      <h3>Weather in {city.label}</h3>\n      <p>{weather.current.condition.text}</p>\n      <img src={`https://${weather.current.condition.icon}`} alt=\"Weather icon\" />\n      <p>Temperature: {weather.current.temp_c}Â°C</p>\n    </div>\n  );\n}\n\nexport default WeatherDetails;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}