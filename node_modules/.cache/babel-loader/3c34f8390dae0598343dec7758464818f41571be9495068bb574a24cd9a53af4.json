{"ast":null,"code":"var _jsxFileName = \"/Users/avinashpathrol/Downloads/Silvacom/Travel Reservation/client/src/components/WeatherDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WeatherDetails({\n  city\n}) {\n  _s();\n  const [coords, setCoords] = useState(null);\n\n  // Function to fetch coordinates based on the city name\n  const fetchCoordinates = cityName => {\n    // Call your backend endpoint that uses OpenWeatherMap's Geocoding API\n    return fetch(`http://localhost:3001/geo/direct?q=${encodeURIComponent(cityName)}`).then(response => response.json()).then(data => {\n      // Assuming the data is an array and you want the first result\n      const location = data[0];\n      setCoords({\n        lat: location.lat,\n        lon: location.lon\n      });\n      return {\n        lat: location.lat,\n        lon: location.lon\n      };\n    });\n  };\n\n  // Function to fetch weather details based on coordinates\n  const fetchWeather = (lat, lon) => {\n    return fetch(`http://localhost:3001/weather?lat=${lat}&lon=${lon}`).then(response => response.json()).then(setWeather).catch(error => {\n      console.error(error);\n      setError('Failed to load weather data');\n    });\n  };\n  useEffect(() => {\n    if (city) {\n      if (city.lat && city.lon) {\n        // If we already have the coordinates, fetch the weather right away\n        fetchWeather(city.lat, city.lon);\n      } else {\n        // Otherwise, fetch the coordinates first\n        fetchCoordinates(city.name).then(({\n          lat,\n          lon\n        }) => fetchWeather(lat, lon));\n      }\n    }\n  }, [city]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Ensure weather data is loaded before trying to access it\n  if (!weather || !weather.current || !weather.current.condition) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading weather...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Weather in \", city.label]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: weather.current.condition.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: weather.current.condition.icon,\n      alt: \"Weather icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Temperature: \", weather.current.temp_c, \"\\xB0C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(WeatherDetails, \"h9BGX1AeiDciGO6YOqllsiYxBEg=\");\n_c = WeatherDetails;\nexport default WeatherDetails;\nvar _c;\n$RefreshReg$(_c, \"WeatherDetails\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WeatherDetails","city","_s","coords","setCoords","fetchCoordinates","cityName","fetch","encodeURIComponent","then","response","json","data","location","lat","lon","fetchWeather","setWeather","catch","error","console","setError","name","children","fileName","_jsxFileName","lineNumber","columnNumber","weather","current","condition","label","text","src","icon","alt","temp_c","_c","$RefreshReg$"],"sources":["/Users/avinashpathrol/Downloads/Silvacom/Travel Reservation/client/src/components/WeatherDetails.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction WeatherDetails({ city }) {\n    const [coords, setCoords] = useState(null);\n  \n    // Function to fetch coordinates based on the city name\n    const fetchCoordinates = (cityName) => {\n      // Call your backend endpoint that uses OpenWeatherMap's Geocoding API\n      return fetch(`http://localhost:3001/geo/direct?q=${encodeURIComponent(cityName)}`)\n        .then((response) => response.json())\n        .then((data) => {\n          // Assuming the data is an array and you want the first result\n          const location = data[0];\n          setCoords({ lat: location.lat, lon: location.lon });\n          return { lat: location.lat, lon: location.lon };\n        });\n    };\n  \n    // Function to fetch weather details based on coordinates\n    const fetchWeather = (lat, lon) => {\n      return fetch(`http://localhost:3001/weather?lat=${lat}&lon=${lon}`)\n        .then((response) => response.json())\n        .then(setWeather)\n        .catch((error) => {\n          console.error(error);\n          setError('Failed to load weather data');\n        });\n    };\n  \n    useEffect(() => {\n      if (city) {\n        if (city.lat && city.lon) {\n          // If we already have the coordinates, fetch the weather right away\n          fetchWeather(city.lat, city.lon);\n        } else {\n          // Otherwise, fetch the coordinates first\n          fetchCoordinates(city.name).then(({ lat, lon }) => fetchWeather(lat, lon));\n        }\n      }\n    }, [city]);\n\n  \n  \n\n  if (error) {\n    return <p>{error}</p>;\n  }\n\n  // Ensure weather data is loaded before trying to access it\n  if (!weather || !weather.current || !weather.current.condition) {\n    return <p>Loading weather...</p>;\n  }\n\n  return (\n    <div>\n      <h3>Weather in {city.label}</h3>\n      <p>{weather.current.condition.text}</p>\n      <img src={weather.current.condition.icon} alt=\"Weather icon\" />\n      <p>Temperature: {weather.current.temp_c}Â°C</p>\n      {/* Display more weather details as needed */}\n    </div>\n  );\n}\n\nexport default WeatherDetails;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}