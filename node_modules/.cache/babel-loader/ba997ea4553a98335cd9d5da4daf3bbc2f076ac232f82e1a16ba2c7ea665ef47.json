{"ast":null,"code":"import React,{useState,useEffect}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function WeatherDetails(_ref){let{city}=_ref;const[weather,setWeather]=useState(null);const[error,setError]=useState('');useEffect(()=>{const fetchWeather=async()=>{if(!city||!city.label)return;try{const weatherResponse=await fetch(\"https://frozen-sea-07084-acf2dc3cd045.herokuapp.com/weather/\".concat(encodeURIComponent(city.label)));const weatherData=await weatherResponse.json();if(!weatherResponse.ok)throw new Error(weatherData.message||'Failed to fetch weather data');setWeather(weatherData);}catch(error){console.error('Weather fetching error:',error);setError('Failed to load weather data');}};fetchWeather();},[city]);if(error)return/*#__PURE__*/_jsx(\"p\",{children:error});// Update component to match your API's response structure\nif(!weather||!weather.weather||weather.weather.length===0){return/*#__PURE__*/_jsx(\"p\",{children:\"Loading weather...\"});}// Assuming temperature is in Kelvin (common for many APIs), convert to Celsius\nconst tempCelsius=(weather.main.temp-273.15).toFixed(2);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Weather in \",city.label]}),/*#__PURE__*/_jsx(\"p\",{children:weather.weather[0].description}),/*#__PURE__*/_jsx(\"img\",{src:\"http://openweathermap.org/img/wn/\".concat(weather.weather[0].icon,\".png\"),alt:\"Weather icon\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Temperature: \",tempCelsius,\"\\xB0C\"]})]});}export default WeatherDetails;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","WeatherDetails","_ref","city","weather","setWeather","error","setError","fetchWeather","label","weatherResponse","fetch","concat","encodeURIComponent","weatherData","json","ok","Error","message","console","children","length","tempCelsius","main","temp","toFixed","description","src","icon","alt"],"sources":["/Users/avinashpathrol/Downloads/Silvacom/Travel Reservation/client/src/components/WeatherDetails.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction WeatherDetails({ city }) {\n  const [weather, setWeather] = useState(null);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const fetchWeather = async () => {\n      if (!city || !city.label) return;\n\n      try {\n        const weatherResponse = await fetch(`https://frozen-sea-07084-acf2dc3cd045.herokuapp.com/weather/${encodeURIComponent(city.label)}`);\n        const weatherData = await weatherResponse.json();\n        if (!weatherResponse.ok) throw new Error(weatherData.message || 'Failed to fetch weather data');\n        setWeather(weatherData);\n      } catch (error) {\n        console.error('Weather fetching error:', error);\n        setError('Failed to load weather data');\n      }\n    };\n\n    fetchWeather();\n  }, [city]);\n\n  if (error) return <p>{error}</p>;\n\n  // Update component to match your API's response structure\n  if (!weather || !weather.weather || weather.weather.length === 0) {\n    return <p>Loading weather...</p>;\n  }\n\n  // Assuming temperature is in Kelvin (common for many APIs), convert to Celsius\n  const tempCelsius = (weather.main.temp - 273.15).toFixed(2);\n\n  return (\n    <div>\n      <h3>Weather in {city.label}</h3>\n      <p>{weather.weather[0].description}</p>\n      <img src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}.png`} alt=\"Weather icon\" />\n      <p>Temperature: {tempCelsius}Â°C</p>\n      {/* Display more weather details as needed */}\n    </div>\n  );\n}\n\nexport default WeatherDetails;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEnD,QAAS,CAAAC,cAAcA,CAAAC,IAAA,CAAW,IAAV,CAAEC,IAAK,CAAC,CAAAD,IAAA,CAC9B,KAAM,CAACE,OAAO,CAAEC,UAAU,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACW,KAAK,CAAEC,QAAQ,CAAC,CAAGZ,QAAQ,CAAC,EAAE,CAAC,CAEtCC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAY,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC/B,GAAI,CAACL,IAAI,EAAI,CAACA,IAAI,CAACM,KAAK,CAAE,OAE1B,GAAI,CACF,KAAM,CAAAC,eAAe,CAAG,KAAM,CAAAC,KAAK,gEAAAC,MAAA,CAAgEC,kBAAkB,CAACV,IAAI,CAACM,KAAK,CAAC,CAAE,CAAC,CACpI,KAAM,CAAAK,WAAW,CAAG,KAAM,CAAAJ,eAAe,CAACK,IAAI,CAAC,CAAC,CAChD,GAAI,CAACL,eAAe,CAACM,EAAE,CAAE,KAAM,IAAI,CAAAC,KAAK,CAACH,WAAW,CAACI,OAAO,EAAI,8BAA8B,CAAC,CAC/Fb,UAAU,CAACS,WAAW,CAAC,CACzB,CAAE,MAAOR,KAAK,CAAE,CACda,OAAO,CAACb,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/CC,QAAQ,CAAC,6BAA6B,CAAC,CACzC,CACF,CAAC,CAEDC,YAAY,CAAC,CAAC,CAChB,CAAC,CAAE,CAACL,IAAI,CAAC,CAAC,CAEV,GAAIG,KAAK,CAAE,mBAAOR,IAAA,MAAAsB,QAAA,CAAId,KAAK,CAAI,CAAC,CAEhC;AACA,GAAI,CAACF,OAAO,EAAI,CAACA,OAAO,CAACA,OAAO,EAAIA,OAAO,CAACA,OAAO,CAACiB,MAAM,GAAK,CAAC,CAAE,CAChE,mBAAOvB,IAAA,MAAAsB,QAAA,CAAG,oBAAkB,CAAG,CAAC,CAClC,CAEA;AACA,KAAM,CAAAE,WAAW,CAAG,CAAClB,OAAO,CAACmB,IAAI,CAACC,IAAI,CAAG,MAAM,EAAEC,OAAO,CAAC,CAAC,CAAC,CAE3D,mBACEzB,KAAA,QAAAoB,QAAA,eACEpB,KAAA,OAAAoB,QAAA,EAAI,aAAW,CAACjB,IAAI,CAACM,KAAK,EAAK,CAAC,cAChCX,IAAA,MAAAsB,QAAA,CAAIhB,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC,CAACsB,WAAW,CAAI,CAAC,cACvC5B,IAAA,QAAK6B,GAAG,qCAAAf,MAAA,CAAsCR,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC,CAACwB,IAAI,QAAO,CAACC,GAAG,CAAC,cAAc,CAAE,CAAC,cAClG7B,KAAA,MAAAoB,QAAA,EAAG,eAAa,CAACE,WAAW,CAAC,OAAE,EAAG,CAAC,EAEhC,CAAC,CAEV,CAEA,cAAe,CAAArB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}